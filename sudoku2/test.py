import unittest
import timeout_decorator
from solution import sudoku2

EXECUTION_TIME_LIMIT = 4

# All tests in this class come directly from CodeSignal
class CodeSignalTests(unittest.TestCase):
   def setUp(self):
      self.example1 = [
         ['.', '.', '.', '1', '4', '.', '.', '2', '.'],
         ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
         ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
         ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
         ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
         ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
         ['.', '.', '.', '5', '.', '.', '.', '7', '.']
      ]
      self.example2 = [
         ['.', '.', '.', '.', '2', '.', '.', '9', '.'],
         ['.', '.', '.', '.', '6', '.', '.', '.', '.'],
         ['7', '1', '.', '.', '7', '5', '.', '.', '.'],
         ['.', '7', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '8', '3', '.', '.', '.'],
         ['.', '.', '8', '.', '.', '7', '.', '6', '.'],
         ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
         ['.', '1', '.', '2', '.', '.', '.', '.', '.'],
         ['.', '2', '.', '.', '3', '.', '.', '.', '.']
      ]

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_1(self):
      expected = True
      actual = sudoku2(self.example1)
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_2(self):
      expected = False
      actual = sudoku2(self.example2)
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_3(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '4', '.', '.', '.', '6', '3', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['5', '.', '.', '.', '.', '.', '.', '9', '.'],
         ['.', '.', '.', '5', '6', '.', '.', '.', '.'],
         ['4', '.', '3', '.', '.', '.', '.', '.', '1'],
         ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '5', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_4(self):
      expected = True
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '.', '.', '2'],
         ['.', '.', '.', '.', '.', '.', '6', '.', '.'],
         ['.', '.', '1', '4', '.', '.', '8', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '3', '.', '.', '.', '.'],
         ['5', '.', '8', '6', '.', '.', '.', '.', '.'],
         ['.', '9', '.', '.', '.', '.', '4', '.', '.'],
         ['.', '.', '.', '.', '5', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_5(self):
      expected = True
      actual = sudoku2([
         ['.', '9', '.', '.', '4', '.', '.', '.', '.'],
         ['1', '.', '.', '.', '.', '.', '6', '.', '.'],
         ['.', '.', '3', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
         ['3', '.', '.', '.', '5', '.', '.', '.', '.'],
         ['.', '.', '7', '.', '.', '4', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '7', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_6(self):
      expected = False
      actual = sudoku2([
         ['7', '.', '.', '.', '4', '.', '.', '.', '.'],
         ['.', '.', '.', '8', '6', '5', '.', '.', '.'],
         ['.', '1', '.', '2', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '9', '.', '.', '.'],
         ['.', '.', '.', '.', '5', '.', '5', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '2', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_7(self):
      expected = False
      actual = sudoku2([
         ['.', '4', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '4', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '1', '.', '.', '7', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '3', '.', '.', '.', '6', '.'],
         ['.', '.', '.', '.', '.', '6', '.', '9', '.'],
         ['.', '.', '.', '.', '1', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '2', '.', '.'],
         ['.', '.', '.', '8', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_8(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '5', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '8', '.', '.', '.', '3', '.'],
         ['.', '5', '.', '.', '2', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '9'],
         ['.', '.', '.', '.', '.', '.', '4', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '7'],
         ['.', '1', '.', '.', '.', '.', '.', '.', '.'],
         ['2', '4', '.', '.', '.', '.', '9', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_9(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '9', '.', '.', '.', '.', '.', '.', '1'],
         ['8', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '9', '9', '3', '5', '7', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '4', '.'],
         ['.', '.', '.', '8', '.', '.', '.', '.', '.'],
         ['.', '1', '.', '.', '.', '.', '4', '.', '9'],
         ['.', '.', '.', '5', '.', '4', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_10(self):
      expected = True
      actual = sudoku2([
         ['.', '.', '.', '2', '.', '.', '6', '.', '.'],
         ['.', '.', '.', '1', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '5', '.', '1', '.', '.', '8'],
         ['.', '3', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '9', '.', '.', '.', '.', '3'],
         ['4', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '3', '8', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '4']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_11(self):
      expected = True
      actual = sudoku2([
         ['.', '.', '.', '.', '8', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '5', '.', '.'],
         ['.', '.', '.', '.', '4', '.', '.', '2', '.'],
         ['.', '.', '.', '3', '.', '9', '.', '.', '.'],
         ['.', '.', '1', '8', '.', '.', '9', '.', '.'],
         ['.', '.', '.', '.', '.', '5', '1', '.', '.'],
         ['.', '.', '3', '.', '.', '8', '.', '.', '.'],
         ['.', '1', '2', '.', '3', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '7', '.', '.', '1']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_12(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '5', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['9', '3', '.', '.', '2', '.', '4', '.', '.'],
         ['.', '.', '7', '.', '.', '.', '3', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '3', '4', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '3', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '5', '2', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_13(self):
      expected = True
      actual = sudoku2([
         ['.', '.', '.', '.', '4', '.', '9', '.', '.'],
         ['.', '.', '2', '1', '.', '.', '3', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '3'],
         ['.', '.', '.', '2', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
         ['.', '.', '.', '6', '1', '.', '.', '.', '.'],
         ['.', '.', '9', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '9', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_14(self):
      expected = True
      actual = sudoku2([
         ['.', '8', '7', '6', '5', '4', '3', '2', '1'],
         ['2', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['3', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['4', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['5', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['6', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['8', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['9', '.', '.', '.', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_15(self):
      expected = True
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['4', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '6', '.', '.'],
         ['.', '.', '.', '3', '8', '.', '.', '.', '.'],
         ['.', '5', '.', '.', '.', '6', '.', '.', '1'],
         ['8', '.', '.', '.', '.', '.', '.', '6', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '7', '.', '9', '.', '.', '.', '.'],
         ['.', '.', '.', '6', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_16(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '.', '.', '1'],
         ['.', '.', '.', '.', '.', '6', '.', '.', '.'],
         ['4', '.', '.', '.', '.', '.', '3', '8', '.'],
         ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '5', '3', '.', '.', '.'],
         ['.', '.', '.', '.', '6', '8', '.', '.', '.'],
         ['3', '.', '.', '9', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '2', '1', '1', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_17(self):
      expected = False
      actual = sudoku2([
         ['.', '8', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '2', '.', '.', '.', '.'],
         ['.', '6', '.', '.', '.', '.', '1', '.', '4'],
         ['.', '.', '.', '9', '.', '.', '7', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '4', '.'],
         ['.', '.', '1', '.', '.', '8', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '5', '.', '7', '.'],
         ['.', '.', '3', '.', '.', '5', '6', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_18(self):
      expected = True
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '2', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '2', '7', '1', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '2', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '5', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '9', '.', '.', '.', '8'],
         ['.', '.', '.', '.', '.', '1', '6', '.', '.'],
         ['.', '.', '.', '.', '6', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_19(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '.', '9', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '3', '.', '.', '.', '.', '.', '1'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['1', '.', '.', '.', '.', '.', '3', '.', '.'],
         ['.', '.', '.', '.', '2', '.', '6', '.', '.'],
         ['.', '9', '.', '.', '.', '.', '.', '7', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['8', '.', '.', '8', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

   @timeout_decorator.timeout(EXECUTION_TIME_LIMIT)
   def test_20(self):
      expected = False
      actual = sudoku2([
         ['.', '.', '.', '.', '.', '.', '8', '3', '.'],
         ['2', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['7', '.', '.', '.', '.', '7', '.', '9', '5'],
         ['.', '.', '.', '1', '.', '.', '.', '.', '2'],
         ['.', '8', '.', '9', '.', '.', '.', '.', '.'],
         ['.', '.', '5', '1', '9', '.', '.', '.', '.'],
         ['5', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
         ['.', '.', '.', '.', '.', '.', '.', '.', '.']
      ])
      self.assertEqual(actual, expected)

if __name__ == '__main__':
   unittest.main()
